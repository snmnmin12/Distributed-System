// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package hw3;

import "google/protobuf/timestamp.proto";

// The messenger service definition.
service MessengerServer {
  rpc ShakeHand(Reply) returns (Reply) {}
  rpc Login (Request) returns (Reply) {}
  rpc List (Request) returns (ListReply) {}
  rpc Join (Request) returns (Reply) {}
  rpc Leave (Request) returns (Reply) {}
  // Bidirectional streaming RPC
  rpc Chat (stream Message) returns (stream Message) {} 
  rpc ServerCommunicate(Data) returns(Reply){}
  rpc Forward(SMessage) returns(Reply){}
}

message Data {
  string username = 1;
  repeated string followers = 2;
  repeated string following = 3;
}

message ListReply {
  repeated string all_rooms = 1;
  repeated string joined_rooms = 2;
  repeated string follower_rooms = 3;
}

message Request {
  string username = 1;
  repeated string arguments = 2;
}

message Reply {
  string msg = 1;
}

message Message {
  //Username who sent the message
  string username = 1;
  //Message from the user
  string msg = 2;
  //Time the message was sent
  google.protobuf.Timestamp timestamp = 3;
}

message SMessage {
  string username = 1;
  Message msg = 2; 
}
