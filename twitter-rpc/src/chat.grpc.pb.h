// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto
#ifndef GRPC_chat_2eproto__INCLUDED
#define GRPC_chat_2eproto__INCLUDED

#include "chat.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chatroom {

// The greeting service definition.
class ChatService final {
 public:
  static constexpr char const* service_full_name() {
    return "chatroom.ChatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::chatroom::Message, ::chatroom::Response>> StartChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::chatroom::Message, ::chatroom::Response>>(StartChatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chatroom::Message, ::chatroom::Response>> AsyncStartChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chatroom::Message, ::chatroom::Response>>(AsyncStartChatRaw(context, cq, tag));
    }
    virtual ::grpc::Status Join(::grpc::ClientContext* context, const ::chatroom::Request& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> AsyncJoin(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncJoinRaw(context, request, cq));
    }
    virtual ::grpc::Status Leave(::grpc::ClientContext* context, const ::chatroom::Request& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> AsyncLeave(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncLeaveRaw(context, request, cq));
    }
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::chatroom::ListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ListResponse>>(AsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status Send(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> AsyncSend(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncSendRaw(context, request, cq));
    }
    virtual ::grpc::Status SendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> AsyncSendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncSendAllRaw(context, request, cq));
    }
    virtual ::grpc::Status RecvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::chatroom::ChatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ChatResponse>> AsyncRecvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ChatResponse>>(AsyncRecvAllRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::chatroom::Message, ::chatroom::Response>* StartChatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::chatroom::Message, ::chatroom::Response>* AsyncStartChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncJoinRaw(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncLeaveRaw(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncSendRaw(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncSendAllRaw(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ChatResponse>* AsyncRecvAllRaw(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::chatroom::Message, ::chatroom::Response>> StartChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::chatroom::Message, ::chatroom::Response>>(StartChatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::chatroom::Message, ::chatroom::Response>> AsyncStartChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::chatroom::Message, ::chatroom::Response>>(AsyncStartChatRaw(context, cq, tag));
    }
    ::grpc::Status Join(::grpc::ClientContext* context, const ::chatroom::Request& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> AsyncJoin(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncJoinRaw(context, request, cq));
    }
    ::grpc::Status Leave(::grpc::ClientContext* context, const ::chatroom::Request& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> AsyncLeave(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncLeaveRaw(context, request, cq));
    }
    ::grpc::Status List(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::chatroom::ListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::ListResponse>>(AsyncListRaw(context, request, cq));
    }
    ::grpc::Status Send(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> AsyncSend(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncSendRaw(context, request, cq));
    }
    ::grpc::Status SendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> AsyncSendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncSendAllRaw(context, request, cq));
    }
    ::grpc::Status RecvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::chatroom::ChatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>> AsyncRecvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>>(AsyncRecvAllRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::chatroom::Message, ::chatroom::Response>* StartChatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::chatroom::Message, ::chatroom::Response>* AsyncStartChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncJoinRaw(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncLeaveRaw(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncSendRaw(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncSendAllRaw(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>* AsyncRecvAllRaw(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_StartChat_;
    const ::grpc::RpcMethod rpcmethod_Join_;
    const ::grpc::RpcMethod rpcmethod_Leave_;
    const ::grpc::RpcMethod rpcmethod_List_;
    const ::grpc::RpcMethod rpcmethod_Send_;
    const ::grpc::RpcMethod rpcmethod_SendAll_;
    const ::grpc::RpcMethod rpcmethod_RecvAll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status StartChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chatroom::Response, ::chatroom::Message>* stream);
    virtual ::grpc::Status Join(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response);
    virtual ::grpc::Status Leave(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response);
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::chatroom::ListRequest* request, ::chatroom::ListResponse* response);
    virtual ::grpc::Status Send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response);
    virtual ::grpc::Status SendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response);
    virtual ::grpc::Status RecvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartChat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chatroom::Response, ::chatroom::Message>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::chatroom::Response, ::chatroom::Message>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Join() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::chatroom::Request* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Leave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Leave() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Leave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Leave(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeave(::grpc::ServerContext* context, ::chatroom::Request* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::chatroom::ListRequest* request, ::chatroom::ListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::chatroom::ListRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::ListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Send() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::chatroom::SendRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendAll() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SendAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendAll(::grpc::ServerContext* context, ::chatroom::SendAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecvAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RecvAll() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RecvAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvAll(::grpc::ServerContext* context, ::chatroom::RecvAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::ChatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartChat<WithAsyncMethod_Join<WithAsyncMethod_Leave<WithAsyncMethod_List<WithAsyncMethod_Send<WithAsyncMethod_SendAll<WithAsyncMethod_RecvAll<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_StartChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartChat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chatroom::Response, ::chatroom::Message>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Join() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Leave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Leave() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Leave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Leave(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::chatroom::ListRequest* request, ::chatroom::ListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Send() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendAll() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SendAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecvAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RecvAll() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RecvAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Join() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::chatroom::Request, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_Join<BaseClass>::StreamedJoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::Request,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Leave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Leave() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::chatroom::Request, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_Leave<BaseClass>::StreamedLeave, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Leave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Leave(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::Request,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::chatroom::ListRequest, ::chatroom::ListResponse>(std::bind(&WithStreamedUnaryMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::chatroom::ListRequest* request, ::chatroom::ListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::ListRequest,::chatroom::ListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Send() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::chatroom::SendRequest, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_Send<BaseClass>::StreamedSend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::SendRequest,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendAll() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::chatroom::SendAllRequest, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_SendAll<BaseClass>::StreamedSendAll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::SendAllRequest,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecvAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RecvAll() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::chatroom::RecvAllRequest, ::chatroom::ChatResponse>(std::bind(&WithStreamedUnaryMethod_RecvAll<BaseClass>::StreamedRecvAll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RecvAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecvAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::RecvAllRequest,::chatroom::ChatResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Join<WithStreamedUnaryMethod_Leave<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_SendAll<WithStreamedUnaryMethod_RecvAll<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Join<WithStreamedUnaryMethod_Leave<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_SendAll<WithStreamedUnaryMethod_RecvAll<Service > > > > > > StreamedService;
};

}  // namespace chatroom


#endif  // GRPC_chat_2eproto__INCLUDED
