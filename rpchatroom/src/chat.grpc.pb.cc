// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace chatroom {

static const char* ChatService_method_names[] = {
  "/chatroom.ChatService/SayHello",
  "/chatroom.ChatService/join",
  "/chatroom.ChatService/leave",
  "/chatroom.ChatService/list",
  "/chatroom.ChatService/send",
  "/chatroom.ChatService/sendAll",
  "/chatroom.ChatService/recvAll",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(ChatService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_join_(ChatService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_leave_(ChatService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_(ChatService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_(ChatService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendAll_(ChatService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_recvAll_(ChatService_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatService::Stub::SayHello(::grpc::ClientContext* context, const ::chatroom::Request& request, ::chatroom::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chatroom::Response>* ChatService::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::chatroom::Response>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::Status ChatService::Stub::join(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::chatroom::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_join_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chatroom::Response>* ChatService::Stub::AsyncjoinRaw(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::chatroom::Response>::Create(channel_.get(), cq, rpcmethod_join_, context, request);
}

::grpc::Status ChatService::Stub::leave(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::chatroom::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_leave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chatroom::Response>* ChatService::Stub::AsyncleaveRaw(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::chatroom::Response>::Create(channel_.get(), cq, rpcmethod_leave_, context, request);
}

::grpc::Status ChatService::Stub::list(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::chatroom::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_list_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chatroom::Response>* ChatService::Stub::AsynclistRaw(::grpc::ClientContext* context, const ::chatroom::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::chatroom::Response>::Create(channel_.get(), cq, rpcmethod_list_, context, request);
}

::grpc::Status ChatService::Stub::send(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::chatroom::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_send_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chatroom::Response>* ChatService::Stub::AsyncsendRaw(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::chatroom::Response>::Create(channel_.get(), cq, rpcmethod_send_, context, request);
}

::grpc::Status ChatService::Stub::sendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::chatroom::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_sendAll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chatroom::Response>* ChatService::Stub::AsyncsendAllRaw(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::chatroom::Response>::Create(channel_.get(), cq, rpcmethod_sendAll_, context, request);
}

::grpc::Status ChatService::Stub::recvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::chatroom::ChatResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_recvAll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>* ChatService::Stub::AsyncrecvAllRaw(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>::Create(channel_.get(), cq, rpcmethod_recvAll_, context, request);
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatService::Service, ::chatroom::Request, ::chatroom::Response>(
          std::mem_fn(&ChatService::Service::SayHello), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatService::Service, ::chatroom::JoinRequest, ::chatroom::Response>(
          std::mem_fn(&ChatService::Service::join), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatService::Service, ::chatroom::LeaveRequest, ::chatroom::Response>(
          std::mem_fn(&ChatService::Service::leave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatService::Service, ::chatroom::ListRequest, ::chatroom::Response>(
          std::mem_fn(&ChatService::Service::list), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatService::Service, ::chatroom::SendRequest, ::chatroom::Response>(
          std::mem_fn(&ChatService::Service::send), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatService::Service, ::chatroom::SendAllRequest, ::chatroom::Response>(
          std::mem_fn(&ChatService::Service::sendAll), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatService_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatService::Service, ::chatroom::RecvAllRequest, ::chatroom::ChatResponse>(
          std::mem_fn(&ChatService::Service::recvAll), this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::SayHello(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::join(::grpc::ServerContext* context, const ::chatroom::JoinRequest* request, ::chatroom::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::leave(::grpc::ServerContext* context, const ::chatroom::LeaveRequest* request, ::chatroom::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::list(::grpc::ServerContext* context, const ::chatroom::ListRequest* request, ::chatroom::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::sendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::recvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chatroom

