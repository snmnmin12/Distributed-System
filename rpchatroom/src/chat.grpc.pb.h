// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto
#ifndef GRPC_chat_2eproto__INCLUDED
#define GRPC_chat_2eproto__INCLUDED

#include "chat.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chatroom {

// The greeting service definition.
class ChatService final {
 public:
  static constexpr char const* service_full_name() {
    return "chatroom.ChatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::chatroom::Request& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> AsyncSayHello(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status join(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> Asyncjoin(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncjoinRaw(context, request, cq));
    }
    virtual ::grpc::Status leave(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> Asyncleave(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncleaveRaw(context, request, cq));
    }
    virtual ::grpc::Status send(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> Asyncsend(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncsendRaw(context, request, cq));
    }
    virtual ::grpc::Status sendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::chatroom::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>> AsyncsendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>>(AsyncsendAllRaw(context, request, cq));
    }
    virtual ::grpc::Status recvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::chatroom::ChatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ChatResponse>> AsyncrecvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ChatResponse>>(AsyncrecvAllRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncjoinRaw(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncleaveRaw(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncsendRaw(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::Response>* AsyncsendAllRaw(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatroom::ChatResponse>* AsyncrecvAllRaw(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::chatroom::Request& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> AsyncSayHello(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status join(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> Asyncjoin(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncjoinRaw(context, request, cq));
    }
    ::grpc::Status leave(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> Asyncleave(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncleaveRaw(context, request, cq));
    }
    ::grpc::Status send(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> Asyncsend(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncsendRaw(context, request, cq));
    }
    ::grpc::Status sendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::chatroom::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>> AsyncsendAll(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::Response>>(AsyncsendAllRaw(context, request, cq));
    }
    ::grpc::Status recvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::chatroom::ChatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>> AsyncrecvAll(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>>(AsyncrecvAllRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::chatroom::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncjoinRaw(::grpc::ClientContext* context, const ::chatroom::JoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncleaveRaw(::grpc::ClientContext* context, const ::chatroom::LeaveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncsendRaw(::grpc::ClientContext* context, const ::chatroom::SendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::Response>* AsyncsendAllRaw(::grpc::ClientContext* context, const ::chatroom::SendAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatroom::ChatResponse>* AsyncrecvAllRaw(::grpc::ClientContext* context, const ::chatroom::RecvAllRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_SayHello_;
    const ::grpc::RpcMethod rpcmethod_join_;
    const ::grpc::RpcMethod rpcmethod_leave_;
    const ::grpc::RpcMethod rpcmethod_send_;
    const ::grpc::RpcMethod rpcmethod_sendAll_;
    const ::grpc::RpcMethod rpcmethod_recvAll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response);
    virtual ::grpc::Status join(::grpc::ServerContext* context, const ::chatroom::JoinRequest* request, ::chatroom::Response* response);
    virtual ::grpc::Status leave(::grpc::ServerContext* context, const ::chatroom::LeaveRequest* request, ::chatroom::Response* response);
    virtual ::grpc::Status send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response);
    virtual ::grpc::Status sendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response);
    virtual ::grpc::Status recvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::chatroom::Request* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_join() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join(::grpc::ServerContext* context, const ::chatroom::JoinRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestjoin(::grpc::ServerContext* context, ::chatroom::JoinRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_leave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_leave() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_leave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status leave(::grpc::ServerContext* context, const ::chatroom::LeaveRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestleave(::grpc::ServerContext* context, ::chatroom::LeaveRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_send() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsend(::grpc::ServerContext* context, ::chatroom::SendRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendAll() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_sendAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendAll(::grpc::ServerContext* context, ::chatroom::SendAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recvAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recvAll() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_recvAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecvAll(::grpc::ServerContext* context, ::chatroom::RecvAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatroom::ChatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_join<WithAsyncMethod_leave<WithAsyncMethod_send<WithAsyncMethod_sendAll<WithAsyncMethod_recvAll<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_join() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join(::grpc::ServerContext* context, const ::chatroom::JoinRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_leave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_leave() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_leave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status leave(::grpc::ServerContext* context, const ::chatroom::LeaveRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_send() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendAll() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_sendAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recvAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recvAll() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_recvAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::chatroom::Request, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::chatroom::Request* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::Request,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_join() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::chatroom::JoinRequest, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_join<BaseClass>::Streamedjoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status join(::grpc::ServerContext* context, const ::chatroom::JoinRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedjoin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::JoinRequest,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_leave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_leave() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::chatroom::LeaveRequest, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_leave<BaseClass>::Streamedleave, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_leave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status leave(::grpc::ServerContext* context, const ::chatroom::LeaveRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedleave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::LeaveRequest,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_send() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::chatroom::SendRequest, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_send<BaseClass>::Streamedsend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::chatroom::SendRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::SendRequest,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendAll() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::chatroom::SendAllRequest, ::chatroom::Response>(std::bind(&WithStreamedUnaryMethod_sendAll<BaseClass>::StreamedsendAll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendAll(::grpc::ServerContext* context, const ::chatroom::SendAllRequest* request, ::chatroom::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::SendAllRequest,::chatroom::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recvAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recvAll() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::chatroom::RecvAllRequest, ::chatroom::ChatResponse>(std::bind(&WithStreamedUnaryMethod_recvAll<BaseClass>::StreamedrecvAll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recvAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recvAll(::grpc::ServerContext* context, const ::chatroom::RecvAllRequest* request, ::chatroom::ChatResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrecvAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatroom::RecvAllRequest,::chatroom::ChatResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_join<WithStreamedUnaryMethod_leave<WithStreamedUnaryMethod_send<WithStreamedUnaryMethod_sendAll<WithStreamedUnaryMethod_recvAll<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_join<WithStreamedUnaryMethod_leave<WithStreamedUnaryMethod_send<WithStreamedUnaryMethod_sendAll<WithStreamedUnaryMethod_recvAll<Service > > > > > > StreamedService;
};

}  // namespace chatroom


#endif  // GRPC_chat_2eproto__INCLUDED
